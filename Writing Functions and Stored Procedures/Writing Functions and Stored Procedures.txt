-- 1) Temporal EDA, Variables y Date Manipulation
-- Introduccion del curso (VIDEO)

--1.1 Transacciones por dia

SELECT
  -- Select the date portion of StartDate
  CONVERT(DATE, StartDate) as StartDate,
  -- Measure how many records exist for each StartDate
  COUNT(ID) as CountOfRows 
FROM CapitalBikeShare 
-- Group by the date portion of StartDate
GROUP BY CONVERT(DATE, StartDate)
-- Sort the results by the date portion of StartDate
ORDER BY CONVERT(DATE, StartDate);

--1.2 ¿Segundos o sin segundos?

SELECT
	-- Contar el numero de identificadores
	COUNT(ID) AS Count,
    -- Usar DATEPART() para evaluar la segunda parte de StartDate
    "StartDate" = CASE WHEN DATEPART(SECOND, StartDate) = 0 THEN 'SECONDS = 0'
					   WHEN DATEPART(SECOND, StartDate) > 0 THEN 'SECONDS > 0' END
FROM CapitalBikeShare
GROUP BY
    -- Completa la declaracion CASE
	CASE WHEN DATEPART(SECOND, StartDate) = 0 THEN 'SECONDS = 0'
		 WHEN DATEPART(SECOND, StartDate) > 0 THEN 'SECONDS > 0' END

--1.3 ¿Qué día de la semana está más ocupado?

SELECT
    -- Seleccione el valor del dia de la semana para StartDate
	DATENAME(weekday, StartDate) as DayOfWeek,

    -- Calcular TotalTripHours
	SUM(DATEDIFF(second, StartDate, EndDate))/ 3600 as TotalTripHours 
FROM CapitalBikeShare 

-- Agrupar por dias de la semana
GROUP BY DATENAME(weekday, StartDate)

-- Ordene TotalTripHours en orden descendente
ORDER BY TotalTripHours DESC

--1.4 Encuentra los valores atípicos

SELECT
	-- Calcular TotalRideHours usando SUM() y DATEDIFF()
  	SUM(DATEDIFF(SECOND, StartDate, EndDate))/ 3600 AS TotalRideHours,

    -- Select the DATE portion of StartDate
  	CONVERT(DATE, StartDate) AS DateOnly,

    -- Selecciona el WEEKDAY
  	DATENAME(WEEKDAY, CONVERT(DATE, StartDate)) AS DayOfWeek 
FROM CapitalBikeShare

-- Solo incluye sabado
WHERE DATENAME(WEEKDAY, StartDate) = 'Saturday' 
GROUP BY CONVERT(DATE, StartDate);

--1.5 Variables para datos de fecha y hora (VIDEO)

--1.6 DECLARAR Y REPARAR

-- Crear @ShiftStartTime
DECLARE @ShiftStartTime AS time = '08:00 AM'

-- Crear @StartDate
DECLARE @StartDate AS date

-- Establecer StartDate en la primera StartDate de CapitalBikeShare
SET 
	@StartDate = (
    	SELECT TOP 1 StartDate 
    	FROM CapitalBikeShare 
    	ORDER BY StartDate ASC
		)

-- Crear ShiftStartDateTime
DECLARE @ShiftStartDateTime AS datetime

-- Cast StartDate y ShiftStartTime a tipos de datos de fecha y hora
SET @ShiftStartDateTime = CAST(@StartDate AS datetime) + CAST(@ShiftStartTime AS datetime) 

SELECT @ShiftStartDateTime

-- 1.7 DECLARAR UN TABLE

-- Declare @Shifts como una TABLE
DECLARE @Shifts TABLE(
    -- Crear columna StartDateTime 
	StartDateTime datetime,
    -- Crear columna EndDateTime
	EndDateTime datetime)
-- Rellenar @Shifts
INSERT INTO @Shifts (StartDateTime, EndDateTime)
	SELECT '3/1/2018 8:00 AM', '3/1/2018 4:00 PM' 
SELECT * 
FROM @Shifts

--1.8 INSERT INTO @TABLE

-- Declare @RideDates
DECLARE @RideDates TABLE(
    -- Crear RideStart
	RideStart date,
    -- Crear RideEnd
	RideEnd date)
-- Completar @RideDates
INSERT INTO @RideDates(RideStart, RideEnd)
-- seleccionar los valores de fecha unicos de StartDate y EndDate
SELECT DISTINCT
    -- Cast StartDate como fecha
	CAST(StartDate as date),
    -- Cast EndDate como fecha
	CAST(EndDate as date) 
FROM CapitalBikeShare 
SELECT * 
FROM @RideDates

--1.9 Manipulacion de la fecha (VIDEO)

--1.10 Los parámetros importan con DATEDIFF
-- 5 dias,0 semanas,1 mes

--1.11 Primer día del mes
-- Encuentra el primer dia del mes actual
SELECT DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0)

--2) Funciones definidas por el usuario

--2.1 Funciones definidas por el usuario (VIDEO)

--2.2 ¿Qué dia fue ayer?

-- Crear GetYesterday()
CREATE FUNCTION GetYesterday()

-- Especificar el tipo de datos devueltos
RETURNS date
AS
BEGIN

-- Calcular el valor de la fecha de ayer
RETURN(SELECT DATEADD(day, -1, GETDATE()))
END 

--2.3 Uno en uno

-- Crear SumRideHrsSingleDay
CREATE FUNCTION SumRideHrsSingleDay (@DateParm date)

-- Especificar el tipo de datos devueltos
RETURNS numeric
AS

-- BEGIN
BEGIN
RETURN

-- Agregar la diferencia entre StartDate y EndDate
(SELECT SUM(DATEDIFF(second, StartDate, EndDate))/3600
FROM CapitalBikeShare

 -- Solo incluya transacciones donde StartDate = @DateParm
WHERE CAST(StartDate AS date) = @DateParm)

-- End
END

--2.4 Varias entradas una salida

-- Crear la funcion
CREATE FUNCTION SumRideHrsDateRange (@StartDateParm datetime, @EndDateParm datetime)

-- Especificar el tipo de datos resuelto
RETURNS numeric
AS
BEGIN
RETURN

-- Sumar la diferencia entre StartDate y EndDate
(SELECT SUM(DATEDIFF(second, StartDate, EndDate))/3600
FROM CapitalBikeShare

-- Incluir solo las transacciones relevantes
WHERE StartDate > @StartDateParm and StartDate < @EndDateParm)
END

--2.5 UDF con valores de tabla (VIDEO)

--2.6 TVF en linea

-- Crear la funcion
CREATE FUNCTION SumStationStats(@StartDate AS datetime)

-- Especificar el tipo de datos devueltos
RETURNS TABLE
AS
RETURN
SELECT
	StartStation,

    -- Usar COUNT() para seleccionar RideCount
	COUNT(ID) as RideCount,

    -- Usar SUM() para calcular TotalDuration
    SUM(DURATION) as TotalDuration
FROM CapitalBikeShare
WHERE CAST(StartDate as Date) = @StartDate

-- Group by StartStation
GROUP BY StartStation;

--2.7 TVF de declaración múltiple

-- Crear la funcion
CREATE FUNCTION CountTripAvgDuration (@Month CHAR(2), @Year CHAR(4))

-- Especificar la variable de retorno
RETURNS @DailyTripStats TABLE(
	TripDate	date,
	TripCount	int,
	AvgDuration	numeric)
AS
BEGIN

-- Insertar los datos de la consulta en @DailyTripStats
INSERT @DailyTripStats
SELECT

    -- Cast StartDate as a date
	CAST(StartDate AS date),
    COUNT(ID),
    AVG(Duration)
FROM CapitalBikeShare
WHERE
	DATEPART(month, StartDate) = @Month AND
    DATEPART(year, StartDate) = @Year

-- Group by StartDate as a date
GROUP BY CAST(StartDate AS date)

-- Return
RETURN
END

--2.8 UDF en accion (VIDEO)
--2.9 Ejecutar escalar con seleccionar

-- Crear @BeginDate
DECLARE @BeginDate AS date = '3/1/2018'

-- Crear @EndDate
DECLARE @EndDate AS date = '3/10/2018' 
SELECT

  -- Seleccionar @BeginDate
  @BeginDate AS BeginDate,

  -- Seleccionar @EndDate
  @EndDate AS EndDate,

  -- Ejecutar SumRideHrsDateRange()
  dbo.SumRideHrsDateRange(@BeginDate, @EndDate) AS TotalRideHrs

--2.10 EXEC escalar

-- Crear @RideHrs
DECLARE @RideHrs AS numeric

-- Ejecutar la funcion SumRideHrsSingleDay y almacenar el resultado en @RideHrs
EXEC @RideHrs = dbo.SumRideHrsSingleDay @DateParm = '3/5/2018' 
SELECT 
  'Total Ride Hours for 3/5/2018:', 
  @RideHrs

--2.11 Ejecute TVF en variable

-- Crear @StationStats
DECLARE @StationStats TABLE(
	StartStation nvarchar(100), 
	RideCount int, 
	TotalDuration numeric)

-- Completar @StationStats con los resultados de la funcion
INSERT INTO @StationStats
SELECT TOP 10 *

-- Ejecutar SumStationStats con 3/15/2018
FROM dbo.SumStationStats ('3/15/2018') 
ORDER BY RideCount DESC

-- Selecionar todos los registros de @StationStats
SELECT * 
FROM @StationStats

--2.12 Mantener funciones definidas por el usuario (VIDEO)

--2.13 CREATE o ALTER

-- Actualizar SumStationStats
CREATE OR ALTER FUNCTION dbo.SumStationStats(@EndDate AS date)

-- Habilitar SCHEMABINDING
RETURNS TABLE WITH SCHEMABINDING
AS
RETURN
SELECT
	StartStation,
    COUNT(ID) AS RideCount,
    SUM(DURATION) AS TotalDuration
FROM dbo.CapitalBikeShare
-- Cast EndDate as date y comparar con @EndDate
WHERE CAST(EndDate AS Date) = @EndDate
GROUP BY StartStation;

--2.14 Mejores prácticas
¿Qué hace que una función sea determinista?
--Si devuelve el pronostico de mañana

--3) Stored procedures (VIDEO)
-- 3.1 CREAR PROCEDIMIENTO con SALIDA

-- Crear el stored procedure
CREATE PROCEDURE dbo.cuspSumRideHrsSingleDay
    -- Declarar el parametro de entrada
	@DateParm date,
    -- Declarar el parametro de salida
	@RideHrsOut numeric OUTPUT
AS
-- No enviar el recuento de filas
SET NOCOUNT ON
BEGIN

-- Asignar el resultado de la consulta @RideHrsOut
SELECT
	@RideHrsOut = SUM(DATEDIFF(second, StartDate, EndDate))/3600
FROM CapitalBikeShare

-- Cast StartDate as date y comparar con @DateParm
WHERE CAST(StartDate AS date) = @DateParm
RETURN
END

-- 3.2 Parámetros de salida frente a valores de retorno
Seleccione la declaración que es FALSA al comparar los parámetros de salida y los valores de retorno.
-- Los parametros de salida deben usarse para comunicar errores a la aplicacion que realiza la llamada

--3.3 ¡OH CRUD! (VIDEO)
--3.4 Utilice SP para INSERTAR

-- Crear el stored procedure
CREATE PROCEDURE dbo.cusp_RideSummaryCreate 
    (@DateParm date, @RideHrsParm numeric)
AS
BEGIN
SET NOCOUNT ON

-- Insertar en las columnas Date y RideHours
INSERT INTO dbo.RideSummary(Date, RideHours)

-- Utilice valores de @DateParm y @RideHrsParm
VALUES(@DateParm, @RideHrsParm) 

-- Seleccione el registro que acaba de insertar
SELECT
    -- Seleccioanr la columna fecha
	Date,
    -- seleccionar la columna RideHours
    RideHours
FROM dbo.RideSummary

-- Comprobar si la fecha es igual a @DateParm
WHERE Date = @DateParm
END;

--3.5 Utilice SP para ACTUALIZAR

-- Crear el stored procedure
CREATE PROCEDURE dbo.cuspRideSummaryUpdate

	-- Especificar el parametro de entrada @Date 
	(@Date date,

     -- Especificar el aprametro de entrada @RideHrs
     @RideHrs numeric(18,0))
AS
BEGIN
SET NOCOUNT ON

-- UPDATE RideSummary
UPDATE RideSummary

-- Set
SET
	Date = @Date,
    RideHours = @RideHrs

-- Incluir registros donde la fecha es igual a @Date
WHERE Date = @Date
END;

--3.6 Utilice SP para BORRAR

-- Crear el stored procedure
CREATE PROCEDURE dbo.cuspRideSummaryDelete
	-- Especificar el aprametro de entrada @DateParm 
	(@DateParm date,
     -- Especificar el parametro de salida @RowCountOut 
     @RowCountOut int OUTPUT)
AS
BEGIN

-- Eliminar registros donde la fecha es igual a @DateParm
DELETE FROM dbo.RideSummary
WHERE Date = @DateParm

-- Set @RowCountOut en @@ROWCOUNT
SET @RowCountOut = @@ROWCOUNT
END;

--3.7 Ejecutemos (VIDEO)

--3.8 EJECUTAR con el parámetro SALIDA

-- Crear @RideHrs
DECLARE @RideHrs AS numeric(18,0)

-- Ejecutar el stored procedure
EXEC dbo.cuspSumRideHrsSingleDay

    -- Pasar el parametro de entrada
	@DateParm = '3/1/2018',

    -- Store la salida en @RideHrs
	@RideHrsOut = @RideHrs OUTPUT

-- Seleccione @RideHrs
SELECT @RideHrs AS RideHours

--3.9 EJECUTAR con valor de retorno

-- Crear @ReturnStatus
DECLARE @ReturnStatus AS int

-- Ejecutar el SP
EXEC @ReturnStatus = dbo.cuspRideSummaryUpdate

    -- Especificar @DateParm
	@DateParm = '3/1/2018',

    -- Especificar @RideHrs
	@RideHrs = 300

-- Seleccione las columnas de interes
SELECT
	@ReturnStatus AS ReturnStatus,
    Date,
    RideHours
FROM dbo.RideSummary 
WHERE Date = '3/1/2018';

--3.10 EJECUTAR con SALIDA y valor de retorno

-- Crear @ReturnStatus
DECLARE @ReturnStatus AS int

-- Crear @RowCount
DECLARE @RowCount AS int

-- Ejecute el SP, almacenando el resultado en @ReturnStatus
EXEC @ReturnStatus = dbo.cuspRideSummaryDelete 

    -- Especifique @DateParm
	@DateParm = '3/1/2018',

    -- Especificar RowCountOut
	@RowCountOut = @RowCount OUTPUT

-- Seleccionar las columnas de interes
SELECT
	@ReturnStatus AS ReturnStatus,
    @RowCount as 'RowCount';

--3.11 TRY, CATCH esos errores! (VIDEO)

--3.12 Tu propio TRY..CATCH

-- Alter al stored procedure
CREATE OR ALTER PROCEDURE dbo.cuspRideSummaryDelete

	-- Especificar @DateParm
	@DateParm nvarchar(30),

    -- Especificar @Error
	@Error nvarchar(max) = NULL OUTPUT
AS
SET NOCOUNT ON
BEGIN

  -- Inicio del bloque TRY 
  BEGIN TRY
  	  -- Delete
      DELETE FROM RideSummary
      WHERE Date = @DateParm

  -- Fin del bloque TRY
  END TRY
  -- Inicio del bloque CATCH
  BEGIN CATCH
		SET @Error = 
		'Error_Number: '+ CAST(ERROR_NUMBER() AS VARCHAR) +
		'Error_Severity: '+ CAST(ERROR_SEVERITY() AS VARCHAR) +
		'Error_State: ' + CAST(ERROR_STATE() AS VARCHAR) + 
		'Error_Message: ' + ERROR_MESSAGE() + 
		'Error_Line: ' + CAST(ERROR_LINE() AS VARCHAR)

  -- Fin del bloque CATCH
  END CATCH
END;

--3.13 RECOGER un error

-- Crear @ReturnCode
DECLARE @ReturnCode int

-- Crear @ErrorOut
DECLARE @ErrorOut nvarchar(max)

-- Ejecutar el SP, alamacenando el resultado en @ReturnCode
EXECUTE @ReturnCode = dbo.cuspRideSummaryDelete

    -- Especifique @DateParm
	@DateParm = '1/32/2018',

    -- Asignar @ErrorOut a @Error
	@Error = @ErrorOut OUTPUT

-- Seleccione @ReturnCode y @ErrorOut
SELECT
	@ReturnCode AS ReturnCode,
    @ErrorOut AS ErrorMessage;

--4) Estudio de caso de viaje en taxi en Nueva York
--4.1 Estudio de caso EDA e imputacion (VIDEO)

--4.2 Usa EDA para encontrar escenarios imposibles

SELECT
	-- PickupDate es posterior a hoy
	COUNT (CASE WHEN PickupDate > GetDate() THEN 1 END) AS 'FuturePickup',

    -- DropOffDate es antes a hoy
	COUNT (CASE WHEN DropOffDate > GetDate() THEN 1 END) AS 'FutureDropOff',

    -- PickupDate es despues a DropOffDate
	COUNT (CASE WHEN PickupDate > DropOffDate THEN 1 END) AS 'PickupBeforeDropoff',

    -- TripDistance es 0
	COUNT (CASE WHEN TripDistance = 0 THEN 1 END) AS 'ZeroTripDistance'  
FROM YellowTripData;

--4.3 SP frente a UDF
Para manejar los errores descubiertos en EDA, necesitamos comprender las diferencias entre UDF y SP. Seleccione la afirmación que sea verdadera al comparar UDF y SP.
--UDF se pueden utilizar para DELETE, INSERT, UPDATE fuera de datos del UDF

--4.4 Imputacion media

-- Crear el stored procedure
CREATE PROCEDURE dbo.cuspImputeTripDistanceMean
AS
BEGIN

-- Especificar la variable @AvgTripDistance
DECLARE @AvgTripDistance AS numeric (18,4)

-- Calcular la distancia media del viaje
SELECT @AvgTripDistance = AVG(TripDistance) 
FROM YellowTripData

-- Incluir solo distancias de viajes superiores a 0
WHERE TripDistance > 0

-- Actualizar los registros donde la distancia del viaje es 0
UPDATE YellowTripData
SET TripDistance =  @AvgTripDistance
WHERE TripDistance = 0
END;

--4.5 Imputación Hot Deck

-- Crea la funcion
CREATE FUNCTION dbo.GetTripDistanceHotDeck()

-- Especificar el tipo de datos devueltos
RETURNS numeric(18,4)
AS 
BEGIN
RETURN

	-- Selecciona el primer valor de TripDistance
	(SELECT TOP 1 TripDistance
	FROM YellowTripData

    -- Muestra 1000 registros
	TABLESAMPLE(1000 rows)

    -- Incluir solo registros donde TripDistance es > 0
	WHERE TripDistance > 0)
END;

--4.6 Estudio de caso UDFs (VIDEO)
--4.7 CREAR FUNCIONES

-- Crear la funcion
CREATE FUNCTION dbo.ConvertMileToKm (@Miles numeric(18,2))

-- Especificar el tipo de datos devueltos
RETURNS numeric(18,2)
AS
BEGIN
RETURN
	-- Convertir de millas a kilometros
	(SELECT @Miles * 1.609)
END;

--4.8 Funciones de prueba

SELECT
	-- Select a los 100 primeros registros PickupDate
	TOP 100 PickupDate,

    -- Determine el valor de cambio de PickupDate
	dbo.GetShiftNumber(DATEPART(hour, PickupDate)) AS 'Shift',

    -- Select a FareAmount
	FareAmount,

    -- Convert FareAmount a Euro
	dbo.ConvertDollar(FareAmount, 0.87) AS 'FareinEuro',

    -- Select TripDistance
	TripDistance,

    -- Convert TripDistance a kilometros
	dbo.ConvertMileToKm(TripDistance) AS 'TripDistanceinKM'
FROM YellowTripData

-- Incluir solo registros del segundo turno
WHERE dbo.GetShiftNumber(DATEPART(hour, PickupDate)) = 2;

--4.9 Herramientas de formato (VIDEO)

--4.10 Días de semana lógicos con Hot Deck

SELECT
    -- Seleccione el dia de la semana pickup
	DATENAME(weekday, PickupDate) as DayofWeek,

    -- Calcular TotalAmount por TripDistance
	CAST(AVG(TotalAmount/

            -- Select TripDistance si es mas que 0
			CASE WHEN TripDistance > 0 THEN TripDistance

                 -- Usa GetTripDistanceHotDeck()
     			 ELSE dbo.GetTripDistanceHotDeck() END) as decimal(10,2)) as 'AvgFare'
FROM YellowTripData
GROUP BY DATENAME(weekday, PickupDate)

-- Order by the PickupDate dia de la semana
ORDER BY
     CASE WHEN DATENAME(weekday, PickupDate) = 'Monday' THEN 1
          WHEN DATENAME(weekday, PickupDate) = 'Tuesday' THEN 2
          WHEN DATENAME(weekday, PickupDate) = 'Wednesday' THEN 3
          WHEN DATENAME(weekday, PickupDate) = 'Thursday' THEN 4
          WHEN DATENAME(weekday, PickupDate) = 'Friday' THEN 5
          WHEN DATENAME(weekday, PickupDate) = 'Saturday' THEN 6
          WHEN DATENAME(weekday, PickupDate) = 'Sunday' THEN 7
END ASC;

--4.11 Formato para Alemania

SELECT
    -- Cast PickupDate as a date y mostrar como as a German date
	FORMAT(CAST(PickupDate AS Date), 'd', 'de-de') AS 'PickupDate',
	Zone.Borough,

    -- Mostrar TotalDistance en formato German 
	FORMAT(SUM(TripDistance), 'n', 'de-de') AS 'TotalDistance',

    -- Mostrar TotalRideTime en formato German 
	FORMAT(SUM(DATEDIFF(minute, PickupDate, DropoffDate)), 'n', 'de-de') AS 'TotalRideTime',

    -- Mostrar TotalFare en moneda German 
	FORMAT(SUM(TotalAmount), 'c', 'de-de') AS 'TotalFare'

FROM YellowTripData
INNER JOIN TaxiZoneLookup AS Zone 
ON PULocationID = Zone.LocationID 
GROUP BY
	CAST(PickupDate as date),
    Zone.Borough 
ORDER BY
	CAST(PickupDate as date),
    Zone.Borough;

--4.12 Stored Procedures en caso de estudios (VIDEO)

--4.13 Estadísticas del condado de NYC SP

CREATE OR ALTER PROCEDURE dbo.cuspBoroughRideStats
AS
BEGIN
SELECT
    -- Calcular el dia de semana pickup 
	DATENAME(weekday, PickupDate) AS 'Weekday',

    -- Select al Borough
	Zone.Borough AS 'PickupBorough',

    -- Mostrar AvgFarePerKM como moneda German
	FORMAT(AVG(dbo.ConvertDollar(TotalAmount, .88)/dbo.ConvertMiletoKM(TripDistance)), 'c', 'de-de') AS 'AvgFarePerKM',

    -- Mostrar RideCount en formato German 
	FORMAT(COUNT (ID), 'n', 'de-de') AS 'RideCount',

    -- Mostrar TotalRideMin en formato German
	FORMAT(SUM(DATEDIFF(SECOND, PickupDate, DropOffDate))/60, 'n', 'de-de') AS 'TotalRideMin'

FROM YellowTripData
INNER JOIN TaxiZoneLookup AS Zone 
ON PULocationID = Zone.LocationID

-- Incluir solo registros donde TripDistance es mayor que 0
WHERE TripDistance > 0

-- Group by pickup weekdayy Borough
GROUP BY DATENAME(WEEKDAY, PickupDate), Zone.Borough
ORDER BY CASE WHEN DATENAME(WEEKDAY, PickupDate) = 'Monday' THEN 1
	     	  WHEN DATENAME(WEEKDAY, PickupDate) = 'Tuesday' THEN 2
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Wednesday' THEN 3
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Thursday' THEN 4
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Friday' THEN 5
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Saturday' THEN 6
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Sunday' THEN 7 END,  
		 SUM(DATEDIFF(SECOND, PickupDate, DropOffDate))/60
DESC
END;

--4.14 Resultados de las estadísticas del condado de NYC

-- Crear SPResults
DECLARE @SPResults TABLE(
  	-- Crear Weekday
	Weekday 		nvarchar(30),

    -- Crear Borough
	Borough 		nvarchar(30),

    -- Crear AvgFarePerKM
	AvgFarePerKM 	nvarchar(30),

    -- Crear RideCount
	RideCount		nvarchar(30),

    -- Crear TotalRideMin
	TotalRideMin	nvarchar(30))

-- Insert into @SPResults
INSERT INTO @SPResults

-- Ejecuta el SP
EXEC dbo.cuspBoroughRideStats

-- Select todos los registros de @SPresults 
SELECT * 
FROM @SPResults;

--4.15 Lugares de recogida por turno

-- Crear el stored procedure
CREATE PROCEDURE dbo.cuspPickupZoneShiftStats
	-- Especificar parametro @Borough
	@Borough nvarchar(30)
AS
BEGIN
SELECT
	DATENAME(WEEKDAY, PickupDate) as 'Weekday',

    -- Calcular el numero de turno
	dbo.GetShiftNumber(DATEPART(hour, PickupDate)) as 'Shift',
	Zone.Zone as 'Zone',
	FORMAT(AVG(dbo.ConvertDollar(TotalAmount, .77)/dbo.ConvertMiletoKM(TripDistance)), 'c', 'de-de') AS 'AvgFarePerKM',
	FORMAT(COUNT (ID),'n', 'de-de') as 'RideCount',
	FORMAT(SUM(DATEDIFF(SECOND, PickupDate, DropOffDate))/60, 'n', 'de-de') as 'TotalRideMin'
FROM YellowTripData
INNER JOIN TaxiZoneLookup as Zone on PULocationID = Zone.LocationID 
WHERE
	dbo.ConvertMiletoKM(TripDistance) > 0 AND
	Zone.Borough = @Borough
GROUP BY
	DATENAME(WEEKDAY, PickupDate),

    -- Group by shift
	dbo.GetShiftNumber(DATEPART(hour, PickupDate)),  
	Zone.Zone
ORDER BY CASE WHEN DATENAME(WEEKDAY, PickupDate) = 'Monday' THEN 1
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Tuesday' THEN 2
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Wednesday' THEN 3
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Thursday' THEN 4
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Friday' THEN 5
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Saturday' THEN 6
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Sunday' THEN 7 END,
         -- Order by shift
         dbo.GetShiftNumber(DATEPART(hour, PickupDate)),
         SUM(DATEDIFF(SECOND, PickupDate, DropOffDate))/60 DESC
END;

--4.16 Lugares de recogida por resultados de turno

-- Crear @Borough
DECLARE @Borough as nvarchar(30) = 'Manhattan'

-- Ejecutar el SP
EXEC dbo.cuspPickupZoneShiftStats
    -- Pase @Borough
	@Borough = @Borough;


--4.17 Congratulations :v
