--4) Estudio de caso de viaje en taxi en Nueva York
--4.1 Estudio de caso EDA e imputacion (VIDEO)

--4.2 Usa EDA para encontrar escenarios imposibles

SELECT
	-- PickupDate es posterior a hoy
	COUNT (CASE WHEN PickupDate > GetDate() THEN 1 END) AS 'FuturePickup',

    -- DropOffDate es antes a hoy
	COUNT (CASE WHEN DropOffDate > GetDate() THEN 1 END) AS 'FutureDropOff',

    -- PickupDate es despues a DropOffDate
	COUNT (CASE WHEN PickupDate > DropOffDate THEN 1 END) AS 'PickupBeforeDropoff',

    -- TripDistance es 0
	COUNT (CASE WHEN TripDistance = 0 THEN 1 END) AS 'ZeroTripDistance'  
FROM YellowTripData;

--4.3 SP frente a UDF
Para manejar los errores descubiertos en EDA, necesitamos comprender las diferencias entre UDF y SP. Seleccione la afirmación que sea verdadera al comparar UDF y SP.
--UDF se pueden utilizar para DELETE, INSERT, UPDATE fuera de datos del UDF

--4.4 Imputacion media

-- Crear el stored procedure
CREATE PROCEDURE dbo.cuspImputeTripDistanceMean
AS
BEGIN

-- Especificar la variable @AvgTripDistance
DECLARE @AvgTripDistance AS numeric (18,4)

-- Calcular la distancia media del viaje
SELECT @AvgTripDistance = AVG(TripDistance) 
FROM YellowTripData

-- Incluir solo distancias de viajes superiores a 0
WHERE TripDistance > 0

-- Actualizar los registros donde la distancia del viaje es 0
UPDATE YellowTripData
SET TripDistance =  @AvgTripDistance
WHERE TripDistance = 0
END;

--4.5 Imputación Hot Deck

-- Crea la funcion
CREATE FUNCTION dbo.GetTripDistanceHotDeck()

-- Especificar el tipo de datos devueltos
RETURNS numeric(18,4)
AS 
BEGIN
RETURN

	-- Selecciona el primer valor de TripDistance
	(SELECT TOP 1 TripDistance
	FROM YellowTripData

    -- Muestra 1000 registros
	TABLESAMPLE(1000 rows)

    -- Incluir solo registros donde TripDistance es > 0
	WHERE TripDistance > 0)
END;

--4.6 Estudio de caso UDFs (VIDEO)
--4.7 CREAR FUNCIONES

-- Create the function
CREATE FUNCTION dbo.ConvertMileToKm (@Miles numeric(18,2))
-- Specify return data type
RETURNS numeric(18,2)
AS
BEGIN
RETURN
	-- Convert Miles to Kilometers
	(SELECT @Miles * 1.609)
END;
---------------------------------------------------
--(PARTE 2) Crear la funcion
CREATE FUNCTION dbo.ConvertDollar
	-- Specify @DollarAmt parameter
	(@DollarAmt numeric(18,2),
     -- Specify @ExchangeRate parameter
     @ExchangeRate numeric(18,2))
-- Especificar el tipo de datos devueltos
RETURNS numeric(18,2)
AS
BEGIN
RETURN
	-- Multiply @ExchangeRate and @DollarAmt
	(SELECT @ExchangeRate * @DollarAmt)
END;
----------------------------------------------------
--(PARTE 3) Crear la funcion
CREATE FUNCTION dbo.GetShiftNumber (@Hour integer)
-- Especificar el tipo de datos devueltos
RETURNS int
AS
BEGIN
RETURN
	-- 12am (0) to 9am (9) shift
	(CASE WHEN @Hour >= 0 AND @Hour < 9 THEN 1
     	  -- 9am (9) to 5pm (17) shift
		  WHEN @Hour >= 9 AND @Hour < 17 THEN 2
          -- 5pm (17) to 12am (24) shift
	      WHEN @Hour >= 17 AND @Hour < 24 THEN 3 END)
END;

--4.8 Funciones de prueba

SELECT
	-- Select a los 100 primeros registros PickupDate
	TOP 100 PickupDate,

    -- Determine el valor de cambio de PickupDate
	dbo.GetShiftNumber(DATEPART(hour, PickupDate)) AS 'Shift',

    -- Select a FareAmount
	FareAmount,

    -- Convert FareAmount a Euro
	dbo.ConvertDollar(FareAmount, 0.87) AS 'FareinEuro',

    -- Select TripDistance
	TripDistance,

    -- Convert TripDistance a kilometros
	dbo.ConvertMileToKm(TripDistance) AS 'TripDistanceinKM'
FROM YellowTripData

-- Incluir solo registros del segundo turno
WHERE dbo.GetShiftNumber(DATEPART(hour, PickupDate)) = 2;

--4.9 Herramientas de formato (VIDEO)

--4.10 Días de semana lógicos con Hot Deck

SELECT
    -- Seleccione el dia de la semana pickup
	DATENAME(weekday, PickupDate) as DayofWeek,

    -- Calcular TotalAmount por TripDistance
	CAST(AVG(TotalAmount/

            -- Select TripDistance si es mas que 0
			CASE WHEN TripDistance > 0 THEN TripDistance

                 -- Usa GetTripDistanceHotDeck()
     			 ELSE dbo.GetTripDistanceHotDeck() END) as decimal(10,2)) as 'AvgFare'
FROM YellowTripData
GROUP BY DATENAME(weekday, PickupDate)

-- Order by the PickupDate dia de la semana
ORDER BY
     CASE WHEN DATENAME(weekday, PickupDate) = 'Monday' THEN 1
          WHEN DATENAME(weekday, PickupDate) = 'Tuesday' THEN 2
          WHEN DATENAME(weekday, PickupDate) = 'Wednesday' THEN 3
          WHEN DATENAME(weekday, PickupDate) = 'Thursday' THEN 4
          WHEN DATENAME(weekday, PickupDate) = 'Friday' THEN 5
          WHEN DATENAME(weekday, PickupDate) = 'Saturday' THEN 6
          WHEN DATENAME(weekday, PickupDate) = 'Sunday' THEN 7
END ASC;

--4.11 Formato para Alemania

SELECT
    -- Cast PickupDate as a date y mostrar como as a German date
	FORMAT(CAST(PickupDate AS Date), 'd', 'de-de') AS 'PickupDate',
	Zone.Borough,

    -- Mostrar TotalDistance en formato German 
	FORMAT(SUM(TripDistance), 'n', 'de-de') AS 'TotalDistance',

    -- Mostrar TotalRideTime en formato German 
	FORMAT(SUM(DATEDIFF(minute, PickupDate, DropoffDate)), 'n', 'de-de') AS 'TotalRideTime',

    -- Mostrar TotalFare en moneda German 
	FORMAT(SUM(TotalAmount), 'c', 'de-de') AS 'TotalFare'

FROM YellowTripData
INNER JOIN TaxiZoneLookup AS Zone 
ON PULocationID = Zone.LocationID 
GROUP BY
	CAST(PickupDate as date),
    Zone.Borough 
ORDER BY
	CAST(PickupDate as date),
    Zone.Borough;

--4.12 Stored Procedures en caso de estudios (VIDEO)

--4.13 Estadísticas del condado de NYC SP

CREATE OR ALTER PROCEDURE dbo.cuspBoroughRideStats
AS
BEGIN
SELECT
    -- Calcular el dia de semana pickup 
	DATENAME(weekday, PickupDate) AS 'Weekday',

    -- Select al Borough
	Zone.Borough AS 'PickupBorough',

    -- Mostrar AvgFarePerKM como moneda German
	FORMAT(AVG(dbo.ConvertDollar(TotalAmount, .88)/dbo.ConvertMiletoKM(TripDistance)), 'c', 'de-de') AS 'AvgFarePerKM',

    -- Mostrar RideCount en formato German 
	FORMAT(COUNT (ID), 'n', 'de-de') AS 'RideCount',

    -- Mostrar TotalRideMin en formato German
	FORMAT(SUM(DATEDIFF(SECOND, PickupDate, DropOffDate))/60, 'n', 'de-de') AS 'TotalRideMin'

FROM YellowTripData
INNER JOIN TaxiZoneLookup AS Zone 
ON PULocationID = Zone.LocationID

-- Incluir solo registros donde TripDistance es mayor que 0
WHERE TripDistance > 0

-- Group by pickup weekdayy Borough
GROUP BY DATENAME(WEEKDAY, PickupDate), Zone.Borough
ORDER BY CASE WHEN DATENAME(WEEKDAY, PickupDate) = 'Monday' THEN 1
	     	  WHEN DATENAME(WEEKDAY, PickupDate) = 'Tuesday' THEN 2
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Wednesday' THEN 3
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Thursday' THEN 4
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Friday' THEN 5
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Saturday' THEN 6
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Sunday' THEN 7 END,  
		 SUM(DATEDIFF(SECOND, PickupDate, DropOffDate))/60
DESC
END;

--4.14 Resultados de las estadísticas del condado de NYC

-- Crear SPResults
DECLARE @SPResults TABLE(
  	-- Crear Weekday
	Weekday 		nvarchar(30),

    -- Crear Borough
	Borough 		nvarchar(30),

    -- Crear AvgFarePerKM
	AvgFarePerKM 	nvarchar(30),

    -- Crear RideCount
	RideCount		nvarchar(30),

    -- Crear TotalRideMin
	TotalRideMin	nvarchar(30))

-- Insert into @SPResults
INSERT INTO @SPResults

-- Ejecuta el SP
EXEC dbo.cuspBoroughRideStats

-- Select todos los registros de @SPresults 
SELECT * 
FROM @SPResults;

--4.15 Lugares de recogida por turno

-- Crear el stored procedure
CREATE PROCEDURE dbo.cuspPickupZoneShiftStats
	-- Especificar parametro @Borough
	@Borough nvarchar(30)
AS
BEGIN
SELECT
	DATENAME(WEEKDAY, PickupDate) as 'Weekday',

    -- Calcular el numero de turno
	dbo.GetShiftNumber(DATEPART(hour, PickupDate)) as 'Shift',
	Zone.Zone as 'Zone',
	FORMAT(AVG(dbo.ConvertDollar(TotalAmount, .77)/dbo.ConvertMiletoKM(TripDistance)), 'c', 'de-de') AS 'AvgFarePerKM',
	FORMAT(COUNT (ID),'n', 'de-de') as 'RideCount',
	FORMAT(SUM(DATEDIFF(SECOND, PickupDate, DropOffDate))/60, 'n', 'de-de') as 'TotalRideMin'
FROM YellowTripData
INNER JOIN TaxiZoneLookup as Zone on PULocationID = Zone.LocationID 
WHERE
	dbo.ConvertMiletoKM(TripDistance) > 0 AND
	Zone.Borough = @Borough
GROUP BY
	DATENAME(WEEKDAY, PickupDate),

    -- Group by shift
	dbo.GetShiftNumber(DATEPART(hour, PickupDate)),  
	Zone.Zone
ORDER BY CASE WHEN DATENAME(WEEKDAY, PickupDate) = 'Monday' THEN 1
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Tuesday' THEN 2
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Wednesday' THEN 3
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Thursday' THEN 4
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Friday' THEN 5
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Saturday' THEN 6
              WHEN DATENAME(WEEKDAY, PickupDate) = 'Sunday' THEN 7 END,
         -- Order by shift
         dbo.GetShiftNumber(DATEPART(hour, PickupDate)),
         SUM(DATEDIFF(SECOND, PickupDate, DropOffDate))/60 DESC
END;

--4.16 Lugares de recogida por resultados de turno

-- Crear @Borough
DECLARE @Borough as nvarchar(30) = 'Manhattan'

-- Ejecutar el SP
EXEC dbo.cuspPickupZoneShiftStats
    -- Pase @Borough
	@Borough = @Borough;


--4.17 Congratulations :v